/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var ResultMsg_pb = require('./ResultMsg_pb.js');
goog.exportSymbol('proto.qspace.FuncVertexMsg', null, global);
goog.exportSymbol('proto.qspace.SourceData', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.qspace.SourceData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.qspace.SourceData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.qspace.SourceData.displayName = 'proto.qspace.SourceData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.qspace.SourceData.prototype.toObject = function(opt_includeInstance) {
  return proto.qspace.SourceData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.qspace.SourceData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qspace.SourceData.toObject = function(includeInstance, msg) {
  var f, obj = {
    edge: jspb.Message.getFieldWithDefault(msg, 1, 0),
    source: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.qspace.SourceData}
 */
proto.qspace.SourceData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.qspace.SourceData;
  return proto.qspace.SourceData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.qspace.SourceData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.qspace.SourceData}
 */
proto.qspace.SourceData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEdge(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.qspace.SourceData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.qspace.SourceData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.qspace.SourceData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qspace.SourceData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEdge();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 edge = 1;
 * @return {number}
 */
proto.qspace.SourceData.prototype.getEdge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.qspace.SourceData.prototype.setEdge = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string source = 2;
 * @return {string}
 */
proto.qspace.SourceData.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.qspace.SourceData.prototype.setSource = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.qspace.FuncVertexMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.qspace.FuncVertexMsg.repeatedFields_, null);
};
goog.inherits(proto.qspace.FuncVertexMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.qspace.FuncVertexMsg.displayName = 'proto.qspace.FuncVertexMsg';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.qspace.FuncVertexMsg.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.qspace.FuncVertexMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.qspace.FuncVertexMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.qspace.FuncVertexMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qspace.FuncVertexMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    func: jspb.Message.getFieldWithDefault(msg, 1, ""),
    async: jspb.Message.getFieldWithDefault(msg, 2, false),
    result: (f = msg.getResult()) && ResultMsg_pb.ResultMsg.toObject(includeInstance, f),
    sourcesList: jspb.Message.toObjectList(msg.getSourcesList(),
    proto.qspace.SourceData.toObject, includeInstance),
    funcRef: jspb.Message.getFieldWithDefault(msg, 5, ""),
    ultimateTarget: jspb.Message.getFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.qspace.FuncVertexMsg}
 */
proto.qspace.FuncVertexMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.qspace.FuncVertexMsg;
  return proto.qspace.FuncVertexMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.qspace.FuncVertexMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.qspace.FuncVertexMsg}
 */
proto.qspace.FuncVertexMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFunc(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAsync(value);
      break;
    case 3:
      var value = new ResultMsg_pb.ResultMsg;
      reader.readMessage(value,ResultMsg_pb.ResultMsg.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    case 4:
      var value = new proto.qspace.SourceData;
      reader.readMessage(value,proto.qspace.SourceData.deserializeBinaryFromReader);
      msg.addSources(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFuncRef(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUltimateTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.qspace.FuncVertexMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.qspace.FuncVertexMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.qspace.FuncVertexMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qspace.FuncVertexMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFunc();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAsync();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      ResultMsg_pb.ResultMsg.serializeBinaryToWriter
    );
  }
  f = message.getSourcesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.qspace.SourceData.serializeBinaryToWriter
    );
  }
  f = message.getFuncRef();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUltimateTarget();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string func = 1;
 * @return {string}
 */
proto.qspace.FuncVertexMsg.prototype.getFunc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.qspace.FuncVertexMsg.prototype.setFunc = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool async = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.qspace.FuncVertexMsg.prototype.getAsync = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.qspace.FuncVertexMsg.prototype.setAsync = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional ResultMsg result = 3;
 * @return {?proto.qspace.ResultMsg}
 */
proto.qspace.FuncVertexMsg.prototype.getResult = function() {
  return /** @type{?proto.qspace.ResultMsg} */ (
    jspb.Message.getWrapperField(this, ResultMsg_pb.ResultMsg, 3));
};


/** @param {?proto.qspace.ResultMsg|undefined} value */
proto.qspace.FuncVertexMsg.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.qspace.FuncVertexMsg.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.qspace.FuncVertexMsg.prototype.hasResult = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated SourceData sources = 4;
 * @return {!Array.<!proto.qspace.SourceData>}
 */
proto.qspace.FuncVertexMsg.prototype.getSourcesList = function() {
  return /** @type{!Array.<!proto.qspace.SourceData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.qspace.SourceData, 4));
};


/** @param {!Array.<!proto.qspace.SourceData>} value */
proto.qspace.FuncVertexMsg.prototype.setSourcesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.qspace.SourceData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.qspace.SourceData}
 */
proto.qspace.FuncVertexMsg.prototype.addSources = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.qspace.SourceData, opt_index);
};


proto.qspace.FuncVertexMsg.prototype.clearSourcesList = function() {
  this.setSourcesList([]);
};


/**
 * optional string func_ref = 5;
 * @return {string}
 */
proto.qspace.FuncVertexMsg.prototype.getFuncRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.qspace.FuncVertexMsg.prototype.setFuncRef = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bool ultimate_target = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.qspace.FuncVertexMsg.prototype.getUltimateTarget = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.qspace.FuncVertexMsg.prototype.setUltimateTarget = function(value) {
  jspb.Message.setField(this, 6, value);
};


goog.object.extend(exports, proto.qspace);
